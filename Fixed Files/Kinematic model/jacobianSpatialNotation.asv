function [JacR,JpqpR,JacL,JpqpL] = jacobianSpatialNotation(robot,baseVel1,qD)
baseDof = 6;
act = robot.act;
ant = robot.ant;
frames = robot.frames;
joints = robot.rotationalJoints;
T = robot.T;
S = [0;0;1;0;0;0];
X = cell(frames,1);
Xn = cell(frames,1); %8Xi
velVec = cell(frames,1);
crossTerm = cell(frames,1);
X{1} = VelocityMatrix(T(:,:,1)); %X10
piTi(:,:,1) = T(:,:,1);
qD(1:6) = X{1}*[qD(4:6);qD(1:3)]; %[w,v]
JacR = zeros(6,joints+baseDof);
JpqpR = zeros(6,1);
JacL = zeros(6,joints+baseDof);
JpqpL = zeros(6,1);
for i=2:frames
    piTi(:,:,i) = inverseTransMatrix(T(:,:,ant(i)))*T(:,:,i);
end
velVec{1} = baseVel1;
for i=2:frames
    X{i} = VelocityMatrix(piTi(:,:,i));
    if act(i)~=0
        velVec{i} = X{i}*velVec{ant(i)} + S*qD(act(i)+baseDof);
        crossTerm{i} = crm(velVec{i})*S*qD(act(i)+baseDof);
    end
end

n = 8;
Xn{n-1} = X{n};
for i=(n-1):-1:2
       JacR(:,act(i)+baseDof) = Xn{i}*S;
       JpqpR = JpqpR + Xn{i}*crossTerm{i};
       Xn{ant(i)} = Xn{i}*X{i}; 
end
JacR(:,1:6) = Xn{1}*eye(6,6);
R08_6 = zeros(6,6);
R08_6(1:3,1:3) = T(1:3,1:3,8);
R08_6(4:6,4:6) = T(1:3,1:3,8);
JacR = R08_6*JacR;
JpqpR = R08_6*JpqpR;

n = 15;
Xn{n-1} = X{n};
for i=(n-1):-1:2
       JacL(:,act(i)+baseDof) = Xn{i}*S;
       JpqpL = JpqpL + Xn{i}*crossTerm{i};
       Xn{ant(i)} = Xn{i}*X{i}; 
end
JacR(:,1:6) = Xn{1}*eye(6,6);
R08_6 = zeros(6,6);
R08_6(1:3,1:3) = T(1:3,1:3,8);
R08_6(4:6,4:6) = T(1:3,1:3,8);
JacR = R08_6*JacR;
JpqpR = R08_6*JpqpR;
end

function m = crm(v)
    m = [cross_matrix(v(1:3)) zeros(3); cross_matrix(v(4:6)) cross_matrix(v(1:3))];
end

function X = VelocityMatrix(T)
    X = zeros(6,6);
    R = T(1:3,1:3)';
    p = T(1:3,4);
    X(1:3,1:3) = R;
    X(4:6,1:3) = -R*cross_matrix(p);
    X(4:6,4:6) = R;
end

function Tinv = inverseTransMatrix(T)
    Tinv = zeros(4,4);
	Tinv(1:3,1:3) = T(1:3,1:3)'; 
    Tinv(1:3,4) = (-T(1:3,1:3)')*T(1:3,4);
    Tinv(4,4) = 1;
end